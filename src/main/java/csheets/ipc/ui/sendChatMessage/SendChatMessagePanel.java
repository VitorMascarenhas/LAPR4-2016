/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ipc.ui.sendChatMessage;

import csheets.ipc.ChatMessage;
import csheets.ui.ctrl.UIController;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author smoli
 */
public class SendChatMessagePanel extends javax.swing.JPanel {

    private UIController uiController;

    private final SendChatMessageController controller;

    private final DefaultListModel<String> availableServersListModel;
    private final DefaultListModel<String> connectedServersListModel;

    private final DefaultMutableTreeNode rootNode;
    private final DefaultTreeModel treeModel;
    
    private static final int TIME_VISIBLE = 3000;
    
    private UserChatProfile userProfile;

    /**
     * Creates new form SendChatMessagePanel
     *
     * @param uiController The uiController
     */
    public SendChatMessagePanel(UIController uiController) {
        setName(SendChatMessageExtension.NAME);
        rootNode = new DefaultMutableTreeNode(new ChatMessage(0, "Users", 0));
        treeModel = new DefaultTreeModel(rootNode);

        this.userProfile = new UserChatProfile(null, System.getProperty("user.name"), false, -1, null);
        initComponents();
        
        tree.getSelectionModel().setSelectionMode(
                TreeSelectionModel.SINGLE_TREE_SELECTION);

        tree.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                int selRow = tree.getRowForLocation(e.getX(), e.getY());
                TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
                int threads = treeModel.getChildCount(rootNode); //users connected 
                if (e.getClickCount() == 2) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) selPath.getLastPathComponent();
                   
                    replyToMessage((ChatMessage) node.getUserObject(), selRow, threads);
                   
                    
                }
            }
        });

        tree.setRootVisible(false);
        availableServersListModel = new DefaultListModel<>();
        connectedServersListModel = new DefaultListModel<>();

        lstConnectedServers.setModel(connectedServersListModel);
        lstAvailableServers.setModel(availableServersListModel);

        btnDisconnect.setEnabled(false);
        btnSend.setEnabled(false);
        jbUserProfile.setEnabled(true);
        this.controller = new SendChatMessageController(uiController, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstAvailableServers = new javax.swing.JList<String>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstConnectedServers = new javax.swing.JList<String>();
        jPanel1 = new javax.swing.JPanel();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        jbUserProfile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new JTree(treeModel);
        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        lstAvailableServers.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstAvailableServers);

        jLabel2.setText("Connected instances");

        lstConnectedServers.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(lstConnectedServers);

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDisconnectActionPerformed(evt);
            }
        });

        jbUserProfile.setText("User Profile");
        jbUserProfile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbUserProfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jbUserProfile)
                .addGap(56, 56, 56)
                .addComponent(btnConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(btnDisconnect)
                .addGap(47, 47, 47))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnDisconnect)
                    .addComponent(jbUserProfile))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jLabel2)
            .addComponent(jScrollPane3)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(tree);

        txtMessage.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtMessageActionPerformed(evt);
            }
        });

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSendActionPerformed(evt);
            }
        });

        jLabel1.setText("Available instances");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSend))
            .addComponent(jLabel1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        btnSendAction(evt);
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        btnDisconnectAction(evt);
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        btnConnectAction(evt);
    }//GEN-LAST:event_btnConnectActionPerformed

    private void txtMessageActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtMessageActionPerformed
    {//GEN-HEADEREND:event_txtMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMessageActionPerformed

    private void jbUserProfileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbUserProfileActionPerformed
    {//GEN-HEADEREND:event_jbUserProfileActionPerformed
        createUserPanel();
     
    }//GEN-LAST:event_jbUserProfileActionPerformed

    protected void createUserPanel(){
        JDialog jDialog = new JDialog();
        JPanel panel = new ChatProfile(this, jDialog);
        jDialog.add(panel);
        jDialog.pack();
        jDialog.setVisible(true); 
        jDialog.setLocationRelativeTo(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbUserProfile;
    private javax.swing.JList<String> lstAvailableServers;
    private javax.swing.JList<String> lstConnectedServers;
    private javax.swing.JTree tree;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables

    protected void enableConnect() {
        btnConnect.setEnabled(true);
    }

    protected void enableDisconnect() {
        btnDisconnect.setEnabled(true);
    }

    protected void enableSend() {
        btnSend.setEnabled(true);
    }

    protected synchronized void addRemoteAddress(Set<String> remoteInstances) {

        //add new ip address to jlist
        for (String a : remoteInstances) {
            if (!availableServersListModel.contains(a) && !connectedServersListModel.contains(a)) {
                availableServersListModel.addElement(a);
            }
        }
    }

    private void btnConnectAction(ActionEvent evt) {
        
        List<String> selectedValues = lstAvailableServers.getSelectedValuesList();
        
        for (String s : selectedValues) {
            try {
                this.controller.sendHello(s);

                connectedServersListModel.addElement(s);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            }
            availableServersListModel.removeElement(s);
            btnDisconnect.setEnabled(true);
        }
    }

    private void btnDisconnectAction(ActionEvent evt) {
        List<String> selectedValues = lstConnectedServers.getSelectedValuesList();

        for (String s : selectedValues) {
            try {
                this.controller.disConnectFrom(s);

            } catch (IOException ex) {

            }
            connectedServersListModel.removeElement(s);
        }
    }

    private void btnSendAction(ActionEvent evt) {

        if (txtMessage.getText().length() != 0) {
            try {
                this.controller.sendChatMessage(treeModel.getChildCount(rootNode), txtMessage.getText(), 0);
                txtMessage.setText("");
            } catch (IOException ex) {
                Logger.getLogger(SendChatMessagePanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {

        }
    }

    private void replyToMessage(ChatMessage msg, int selectedRow, int threads) {
        JDialog dlg = new MessageDialog(null, false, controller, msg, selectedRow, threads);
        dlg.setLocationRelativeTo(null);
        dlg.setVisible(true);
    }

    protected void displayPopup(ChatMessage message) {
        //http://stackoverflow.com/questions/25103186/java-joptionpane-which-automatically-closes-after-few-seconds
        JOptionPane pane = new JOptionPane(message, JOptionPane.INFORMATION_MESSAGE);
        JDialog dialog = pane.createDialog(null, "New chat message");
        dialog.setModal(false);
        dialog.setVisible(true);

        new javax.swing.Timer(TIME_VISIBLE, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dialog.setVisible(false);
            }
        }).start();

        addMessage(message);
    }
    /**
     * added by 1140411
     * Add an user to the tree 
     * @param userProfile 
     * @param address 
     */
    protected void addUser(UserChatProfile userProfile, String address){
        
        ChatMessage chat = new ChatMessage(this.rootNode.getChildCount()+1,userProfile.getUsername(),this.rootNode.getIndex(rootNode));
        //rootNode.add(new DefaultMutableTreeNode(chat));
        addObject(rootNode, chat, true);
        userProfile.setParentId(rootNode.getIndex(rootNode));
        String nick = userProfile.getNick();
        String status;
        if(userProfile.isOnline()){
            status = "online";
        }else{
            status = "offline";
        }
        //Atualizar a connectedServersListModel
        connectedServersListModel.removeElement(address);
        StringBuilder str = new StringBuilder();
        str.append(nick).append(" : ").append(status);
        connectedServersListModel.addElement(str.toString());
        lstConnectedServers.setModel(connectedServersListModel);
    }
    
    
    protected UserChatProfile userProfile(){
        return this.userProfile;
    }

    public void setUserProfile(UserChatProfile userProfile)
    {
        this.userProfile = userProfile;
    }
    
    
    protected void addMessage(ChatMessage message) {
        DefaultMutableTreeNode node = searchNode(message.getParentId());

        if (node != null) {
            addObject(node, message, true);
        } else {
            addObject(message);
        }
    }

    public DefaultMutableTreeNode searchNode(int parentId) {
        DefaultMutableTreeNode node = null;
        Enumeration e = ((DefaultMutableTreeNode) treeModel.getRoot()).breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode) e.nextElement();
            ChatMessage c = (ChatMessage) (node.getUserObject());

            if (c.getId() == parentId) {
                return node;
            }
        }
        return null;
    }

    //http://www.java2s.com/Tutorial/Java/0240__Swing/DynamicTree.htm
    public DefaultMutableTreeNode addObject(Object child) {
        DefaultMutableTreeNode parentNode = null;
        TreePath parentPath = tree.getSelectionPath();

        if (parentPath == null) {
            parentNode = rootNode;
        } else {
            parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
        }

        return addObject(parentNode, child, true);
    }

    public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
            Object child, boolean shouldBeVisible) {
        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);

        if (parent == null) {
            parent = rootNode;
        }

        // It is key to invoke this on the TreeModel, and NOT DefaultMutableTreeNode
        treeModel.insertNodeInto(childNode, parent, parent.getChildCount());

        // Make sure the user can see the lovely new node.
        if (shouldBeVisible) {
            tree.scrollPathToVisible(new TreePath(childNode.getPath()));
        }
        return childNode;
    }

    public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent,
            Object child) {
        return addObject(parent, child, false);
    }

    class MyTreeModelListener implements TreeModelListener {

        @Override
        public void treeNodesChanged(TreeModelEvent e) {
            DefaultMutableTreeNode node;
            node = (DefaultMutableTreeNode) (e.getTreePath().getLastPathComponent());

            /*
       * If the event lists children, then the changed node is the child of the
       * node we've already gotten. Otherwise, the changed node and the
       * specified node are the same.
             */
            int index = e.getChildIndices()[0];
            node = (DefaultMutableTreeNode) (node.getChildAt(index));

            System.out.println("The user has finished editing the node.");
            System.out.println("New value: " + node.getUserObject());
        }

        public void treeNodesInserted(TreeModelEvent e) {
        }

        public void treeNodesRemoved(TreeModelEvent e) {
        }

        public void treeStructureChanged(TreeModelEvent e) {
        }
    }
}
