/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ipc.ui;

import csheets.core.Cell;
import csheets.core.Spreadsheet;
import csheets.core.formula.compiler.FormulaCompilationException;
import csheets.ext.style.StylableCell;
import csheets.ext.style.StyleExtension;
import csheets.ipc.CellValueObject;
import csheets.ipc.SharingIdentifier;
import csheets.ui.ctrl.UIController;

import java.awt.Dimension;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;

/**
 *
 * @author smoli
 */
public class StartSharingPanel extends JPanel {

    private StartSharingController controller;

    private DefaultListModel<String> listModel;

    private UIController uiController;

    /**
     * Creates new form StartSharingPanel
     *
     * @param uiController
     */
    public StartSharingPanel(UIController uiController) {
        setName(StartSharingExtension.NAME);
        this.uiController = uiController;
        initComponents();

        lstAvailableServers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstAvailableServers.setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));

        listModel = new DefaultListModel<>();

        lstAvailableServers.setModel(listModel);

        btnConnect.setEnabled(true);
        btnDisconnect.setEnabled(false);
        btnSend.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);

        //creates controller
        controller = new StartSharingController(uiController, this);
        lstActionConnection.setModel(new DefaultListModel<String>());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstActionConnection = new javax.swing.JList();
        txtSharingName = new javax.swing.JTextField();
        lblSharingName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAvailableServers = new javax.swing.JList<String>();
        btnConnect = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jScrollPane2.setViewportView(lstActionConnection);

        lblSharingName.setText("Sharing name:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(lblSharingName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSharingName)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSharingName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSharingName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(lstAvailableServers);

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        jButton2.setText("Start Automatic Sharing");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Stop Automatic Sharing");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnSend)
                    .addComponent(btnDisconnect))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed

        try {
            this.controller.send();
        } catch (UnknownHostException ex) {
            Logger.getLogger(StartSharingPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StartSharingPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        String remoteAddress = this.lstAvailableServers.getSelectedValue();

        try {
            controller.connectTo(remoteAddress);
            
            
            DefaultListModel<String> tmpDlm = (DefaultListModel<String>) lstActionConnection.getModel();
            tmpDlm.addElement(remoteAddress);
            lstActionConnection.setModel(tmpDlm);
            btnDisconnect.setEnabled(true);
            btnSend.setEnabled(true);

            //lstAvailableServers.setEnabled(false);

            //btnConnect.setEnabled(false);
            jButton2.setEnabled(true);
            jButton3.setEnabled(false);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(StartSharingPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        try {
            String remoteAddress = this.lstAvailableServers.getSelectedValue();

            this.controller.disConnectFrom(remoteAddress);

            btnDisconnect.setEnabled(false);
            btnConnect.setEnabled(true);
            btnSend.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(false);

            lstAvailableServers.setEnabled(true);
        } catch (IOException ex) {
            Logger.getLogger(StartSharingPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        startAutomaticSharing();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        stopAutomaticSharing();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblSharingName;
    private javax.swing.JList lstActionConnection;
    private javax.swing.JList<String> lstAvailableServers;
    private javax.swing.JTextField txtSharingName;
    // End of variables declaration//GEN-END:variables

    public synchronized void enableSend() {
        btnConnect.setEnabled(true);
    }

    public synchronized void addRemoteAddress(Set<String> remoteInstances) {

        //add new ip address to jlist
        for (String a : remoteInstances) {
            if (!listModel.contains(a)) {
                listModel.addElement(a);
            }
        }
    }

    public void handleCells(List<CellValueObject> cells) {

        Spreadsheet sheet = this.uiController.getActiveSpreadsheet();
        for (CellValueObject c : cells) {
            try {
                Cell theCell = sheet.getCell(c.getAddress());
                
                if(!theCell.getValue().equals(c.getValue())){
                    theCell.setContent(c.getValue().toString());
                }
               StylableCell stCell = (StylableCell)theCell.getExtension(StyleExtension.NAME); 
               
            if (!(stCell.getBackgroundColor().equals(c.getBgColor()))) {
                System.out.println("O Bg é !=, vou alterar");
                stCell.setBackgroundColor(c.getBgColor());
            }else if(stCell.getBackgroundColor().equals(c.getBgColor())){
                System.out.println("O Bg é ==");
            }

//            if (!(stCell.getBorder().equals(c.getBorder()))) {
//                stCell.setBorder(c.getBorder());
//            }

            if (!(stCell.getFont().equals(c.getFont()))) {
                stCell.setFont(c.getFont());
            }

            if (!(stCell.getForegroundColor().equals(c.getFgColor()))) {
                stCell.setForegroundColor(c.getFgColor());
            }
            //if (!(stCell.getFormat().equals(c.getFormat()))) {
              //  stCell.setFormat(c.getFormat());
            //}

            if (stCell.getHorizontalAlignment() != (c.gethAlignment())) {
                stCell.setHorizontalAlignment(c.gethAlignment());
            }

            if (stCell.getVerticalAlignment() != (c.getvAlignment())) {
                stCell.setVerticalAlignment(c.getvAlignment());
            }
            } catch (FormulaCompilationException ex) {
                Logger.getLogger(StartSharingPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    public void handleCells() {
        JOptionPane.showMessageDialog(this, "incomming", "Teste", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Starts automatic Cell Sharing
     */
    public void startAutomaticSharing() {
        jButton2.setEnabled(false);
        jButton3.setEnabled(true);
        controller.addCellListeners();
    }

    /**
     * Stops automatic Sharing
     */
    public void stopAutomaticSharing() {
        jButton2.setEnabled(true);
        jButton3.setEnabled(false);
        controller.removeCellListener();
    }
    
    public DefaultListModel<String> getLstModel(){
        return (DefaultListModel<String>) this.lstActionConnection.getModel();
    }

}
