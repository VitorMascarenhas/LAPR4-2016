@startuml doc-files/ipc01_01_design_02.png
    participant "uic: UIController" as uic
    participant "uiExtension : UIExtensionComments" as UIExt
    participant "StartSharingPannel : JPanel" as cp
    participant "StartSharingController : Observer" as ctrl
    participant "ConnectionManager : Obervable, Observer" as conMgr
    participant "ConfigurationManager" as cfg
    participant "UdpClient : Obervable, Runnable" as udpC
    participant "UdpServer : Runnable" as udpS
    participant "TcpServer : Runnable" as tcpS
    participant "TcpClientConnection"  as tcpC
    participant "Message : Serializable"  as msg
    participant "CellValueObject : Serializable"  as vo
 
    create cp
        UIExt -> cp :  new(uic)
    create ctrl
        cp -> ctrl : new(uic) 
    
    ctrl -> conMgr : getInstance()
    ctrl -> conMgr : addObserver(this)
    ctrl -> conMgr : connect()

    create cfg
        conMgr -> cfg : new()

        conMgr -> cfg : udpPort = serverUdpPort()
        conMgr -> cfg : timeout = timeout()
    create udpC
        conMgr -> udpC : new(udpPort, timeout)

        conMgr -> cfg : tcpPort = serverUdpPort()
    create tcpS
        conMgr -> tcpS : new(tcpPort)
        conMgr -> tcpS : start()
        tcpS -> tcpS : startServer()

    create udpS
        conMgr -> udpS : new(udpPort)
        conMgr -> udpS : start
        udpS -> udpS : run()
        
    conMgr -> udpC : addObserver(this)

    loop while true
    
        udpC -> udpC : run()

        udpC -> conMgr : update(Observable o, Object arg)

        conMgr -> ctrl : update(Observable o, Object arg)

    end

    note right of cp
        User connects to a remote instance...
    end note

    ctrl -> conMgr : connectTo(String remoteAddress)
    
    create tcpC
        conMgr -> tcpC : new(remoteAddress, port)

    
    note right of cp
        User send cells to a remote instance...
    end note
    
    ctrl -> ctrl : selectedCells = focusOwner.getSelectedCells()

    loop for each selected cell
        ctrl -> ctrl : addCells(cell)

        create vo
            ctrl -> vo : new CellValueObject(cell)

        ctrl -> ctrl : cells.add(vo) 
    end

    create msg
        ctrl -> msg : msg = new(MessageType type, List<CellValueObject> cells, InetAddress localhost)

    ctrl -> conMgr : send(msg)

    loop for all connected tcp clients
        conMgr -> tcpC : send(msg)

    end
@enduml