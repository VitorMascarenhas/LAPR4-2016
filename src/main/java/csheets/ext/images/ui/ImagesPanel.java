/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.images.ui;

import csheets.core.Cell;
import csheets.ext.images.ImageableCell;
import csheets.ext.images.ImageableCellListener;
import csheets.ext.images.ImagesExtension;
import csheets.ui.ctrl.SelectionEvent;
import csheets.ui.ctrl.SelectionListener;
import csheets.ui.ctrl.UIController;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;

/**
 *
 * @author Eduardo Silva
 */
public class ImagesPanel extends JPanel implements SelectionListener, ImageableCellListener, ActionListener {

    private static final String DEFAULT_IMG = "src/main/resources/csheets/res/img/no_image.png";
    
    private ImagesController controller;

    private UIController uiController;
    
    private ImageableCell cell;
    
    /**
     * Creates new form ImagesPanel
     */
    public ImagesPanel(UIController uiController) {
        super(new BorderLayout());
        setName(ImagesExtension.NAME);
        
        // Creates controller
        controller = new ImagesController(uiController, this);
        
        this.uiController = uiController;
        
        uiController.addSelectionListener(this);
       
        //add(this.picturePane,BorderLayout.CENTER);
        //this.picturePane.setVisible(true);
        
        initComponents();
        iconLabel.setMaximumSize(new Dimension(200,200));
        iconLabel.setIcon(createIcon(ImagesPanel.DEFAULT_IMG));
    }
    
    public ImagesPanel(){}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listModelImagesPath = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnAddImg = new javax.swing.JButton();
        btnRemoveImage = new javax.swing.JButton();
        txtFilePath = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        iconLabel = new javax.swing.JLabel();

        listModelImagesPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listModelImagesPathMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listModelImagesPath);

        jLabel1.setText("List of Images:");

        btnAddImg.setText("Add Image");
        btnAddImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddImgActionPerformed(evt);
            }
        });

        btnRemoveImage.setText("Remove Image");
        btnRemoveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveImageActionPerformed(evt);
            }
        });

        txtFilePath.setEditable(false);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtFilePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnAddImg, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveImage, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddImg)
                    .addComponent(btnRemoveImage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(iconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddImgActionPerformed
        actionPerformed(evt);
    }//GEN-LAST:event_btnAddImgActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        imageChooser();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRemoveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveImageActionPerformed
        actionPerformed(evt);
    }//GEN-LAST:event_btnRemoveImageActionPerformed

    private void listModelImagesPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listModelImagesPathMouseClicked
        updateSelectedImage();
    }//GEN-LAST:event_listModelImagesPathMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddImg;
    private javax.swing.JButton btnRemoveImage;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listModelImagesPath;
    private javax.swing.JTextField txtFilePath;
    // End of variables declaration//GEN-END:variables

    @Override
    public void selectionChanged(SelectionEvent event) {
        Cell cell = event.getCell();
        if (cell != null) {
            ImageableCell activeCell = (ImageableCell) cell.getExtension(ImagesExtension.NAME);
            activeCell.addImageableCellListener(this);
            imagesChanged(activeCell);
            
        } else {
            //imagePanel.setImage("C:\\Users\\Miguel Ferr√£o\\Documents\\lapr4-2016-2na\\src\\main\\resources\\csheets\\res\\img\\user.jpg");
        }

        // Stops listening to previous active cell
        //TODO

        if (event.getPreviousCell() != null) {
            boolean empty = ((ImageableCell) event.getPreviousCell().getExtension(ImagesExtension.NAME)).returnAllImages().isEmpty();

            if(!empty) {
                ((ImageableCell) event.getPreviousCell().getExtension(ImagesExtension.NAME)).removeImageableCellListener(this);
            }
        }


    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource() == btnAddImg) {
            ImageableCell imgCell = (ImageableCell)uiController.getActiveCell().getExtension(ImagesExtension.NAME);
            boolean bool = false;
            if(txtFilePath.getText() != null) {
                bool = controller.setImage(imgCell, txtFilePath.getText());
                setImage(imgCell);
                System.out.println("txtFilePath " + txtFilePath.getText());
                txtFilePath.setText("");
            }
            
            if(!bool) {
                JOptionPane.showMessageDialog(null, "Cannot load image");
            }
        }
        
        if(e.getSource() == btnRemoveImage) {
            ImageableCell imgCell = (ImageableCell)uiController.getActiveCell().getExtension(ImagesExtension.NAME);
            boolean bool = false;
            int selectedIndex = listModelImagesPath.getSelectedIndex();
            if (selectedIndex != -1) {
                bool = controller.removeImage(imgCell, listModelImagesPath.getSelectedValue().toString());
                System.out.println("index " + listModelImagesPath.getSelectedIndex());
                
                
//                listModelImagesPath.remove(selectedIndex);
//                DefaultListModel<String> tmpModel = (DefaultListModel<String>) listModelImagesPath.getModel();
//                listModelImagesPath = new JList<String>(tmpModel);
//                listModelImagesPath.repaint();
//                iconLabel = new JLabel(createIcon("user.jpg"));
//                
                
                
////                listModelImagesPath.setModel(tmpModel);
////                listModelImagesPath.revalidate();
////                listModelImagesPath.repaint();
////                listModelImagesPath.doLayout();
////                iconLabel.removeAll();
////                iconLabel.revalidate();
////                iconLabel.repaint();
////                this.revalidate();
////                this.repaint();
                //bool = true;
            }
            
            if(!bool) {
                JOptionPane.showMessageDialog(null, "Cannot remove image");
            }
        }
    }

    @Override
    public void imagesChanged(ImageableCell cell) {
        this.cell = cell;
        controller.cellSelected(cell);
    }
    
    public void setImage(ImageableCell cell){
        if (cell.hasImage()) {
            DefaultListModel<String> lstModel = new DefaultListModel<>();
            for(String s : cell.returnAllImages()){
                lstModel.addElement(s);
            }
            
            updateList(lstModel);
            
            if(cell.returnAllImages().size() != 0 ){
                updateImage(cell.returnAllImages().get(0).toString());
            }else{
                updateImage(ImagesPanel.DEFAULT_IMG);
            }
        
        } else {
            listModelImagesPath.removeAll();
            iconLabel.removeAll();
        }
    }
    
    public void removeImage(ImageableCell cell, int index){
        if (cell.hasImage()) {
            DefaultListModel<String> lstModel = new DefaultListModel<>();
            for(String s : cell.returnAllImages()){
                lstModel.addElement(s);
            }
            
            updateList(lstModel);
            
            if(cell.returnAllImages().size() != 0 ){
                updateImage(cell.returnAllImages().get(0).toString());
            }else{
                updateImage(ImagesPanel.DEFAULT_IMG);
            }
        
        } else {
            listModelImagesPath.removeAll();
            iconLabel.removeAll();
        }
    }
 
    public void updateList(DefaultListModel<String> lstModel){
        listModelImagesPath.setModel(lstModel);
        listModelImagesPath.repaint();
    }
    
    public void updateImage(String imagePath){
        this.iconLabel.setIcon(createIcon(imagePath));
        //System.out.println("->" + listModelImagesPath.getComponent(index).getName());
    }
    
    public void updateSelectedImage(){
        int selectedIndex = listModelImagesPath.getSelectedIndex();
            if (selectedIndex != -1) {
                String imagePath = listModelImagesPath.getModel().getElementAt(selectedIndex);
                System.out.println("#"+ imagePath);
                updateImage(imagePath);
            }
    }
    
    
    private ImageIcon createIcon(String picture)
    {
        ImageIcon icon = new ImageIcon(picture);
        return icon;
    }
    
    private void imageChooser(){
        JFileChooser fileChooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & GIF Images", "jpg", "gif");
        fileChooser.setFileFilter(filter);

        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));

        int result = fileChooser.showOpenDialog(getParent());

        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtFilePath.setText(file.getPath());
        }else{
            txtFilePath.setText("");
        }  
    }
}
