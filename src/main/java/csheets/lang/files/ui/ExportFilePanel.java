/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.lang.files.ui;

import csheets.lang.files.ExportFileController;
import csheets.core.SpreadsheetImpl;
import csheets.lang.files.ExportFile;
import csheets.ui.FileChooser;
import csheets.ui.ctrl.UIController;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import csheets.core.Cell;
import javax.swing.JDialog;

/**
 *
 * @author VitorMascarenhas1120035
 */

public class ExportFilePanel extends javax.swing.JPanel {

    private final UIController uiController;
    private static ExportFileController controller;
    private final DefaultComboBoxModel<String> comboModel;
    private FileChooser fc;
    private JDialog jDialog;

    /**
     * Creates new form FileExportPanel
     */
    public ExportFilePanel(UIController uiController, JDialog jDialog) {
        
        this.uiController = uiController;
        //cmbSpreadsheet = new JComboBox();
        this.jDialog = jDialog;
        controller = new ExportFileController(uiController, this);

        comboModel = new DefaultComboBoxModel<>();
        //cmbSpreadsheet.setModel(comboModel);
        

        initComponents();
        int counter = uiController.getActiveWorkbook().getSpreadsheetCount();

        for (int i = 0; i < counter; i++) {
            String title =  uiController.getActiveWorkbook().getSpreadsheet(i).getTitle();
            
          //  comboModel.addElement(uiController.getActiveWorkbook().getSpreadsheet(i).getTitle());
            cmbSpreadsheet.addItem(title);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rdWorkbook = new javax.swing.JRadioButton();
        rdSpreadsheet = new javax.swing.JRadioButton();
        rdCell = new javax.swing.JRadioButton();
        btnExport = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtSpreadsheet = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCell = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtWorkbook = new javax.swing.JTextField();
        cmbSpreadsheet = new javax.swing.JComboBox();

        rdWorkbook.setSelected(true);
        rdWorkbook.setText("Workbook");
        rdWorkbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdWorkbookActionPerformed(evt);
            }
        });

        rdSpreadsheet.setText("Spreadsheet");
        rdSpreadsheet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdSpreadsheetActionPerformed(evt);
            }
        });

        rdCell.setText("Cell");
        rdCell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCellActionPerformed(evt);
            }
        });

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtSpreadsheet.setColumns(15);
        txtSpreadsheet.setText("spreadsheet");

        jLabel1.setText("Workbook name");

        jLabel2.setText("Spreadsheet name");

        txtCell.setColumns(15);
        txtCell.setText("cell");
        txtCell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCellActionPerformed(evt);
            }
        });

        jLabel3.setText("Cell name");

        txtWorkbook.setColumns(15);
        txtWorkbook.setText("workbook");
        txtWorkbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWorkbookActionPerformed(evt);
            }
        });

        cmbSpreadsheet.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExport)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rdWorkbook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdSpreadsheet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdCell))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtWorkbook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSpreadsheet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addComponent(cmbSpreadsheet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdWorkbook)
                    .addComponent(rdSpreadsheet)
                    .addComponent(rdCell, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtWorkbook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSpreadsheet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSpreadsheet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnExport)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        String wb = txtWorkbook.getText().trim();
        String ss = txtSpreadsheet.getText().trim();
        String c = txtCell.getText().trim();

        if (wb.isEmpty() || ss.isEmpty() || c.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields are mandatory:");
        } else {
            if (rdWorkbook.isSelected()) {
//                try {
//                    List<String> content = controller.createXmlWithWorkbook(wb, ss, c);
                    fc = new FileChooser(this, null);
                    File file = fc.getFileToSave();
                    controller.exportWorkbook(wb, ss, c, file);
//                    ExportFile exportFile = new ExportFile();
//                    exportFile.createFile(file, content);
//                } catch (IOException ex) {
//                    Logger.getLogger(ExportFilePanel.class.getName()).log(Level.SEVERE, null, ex);
//                }
                this.jDialog.dispose();
            } else if (rdCell.isSelected()) {
//                try {
                    Cell[][] cells = controller.getCells();
                    //List<String> content = controller.createXmlWithCells(cells, wb, ss, c);
                    fc = new FileChooser(this, null);
                    File file = fc.getFileToSave();
                    controller.exportCells(wb, ss, c, file, cells);

//                    ExportFile exportFile = new ExportFile();
//                    exportFile.createFile(file, content);
//                } catch (IOException ex) {
//                    Logger.getLogger(ExportFilePanel.class.getName()).log(Level.SEVERE, null, ex);
//                }
                this.jDialog.dispose();
            } else if (rdSpreadsheet.isSelected()) {
                try {
                    SpreadsheetImpl spreadsheet = (SpreadsheetImpl) uiController.getActiveWorkbook().getSpreadsheet(cmbSpreadsheet.getSelectedIndex());
                    List<String> content = controller.createXmlWithSpreadsheet(spreadsheet, wb, ss, c);
                    fc = new FileChooser(this, null);
                    File file = fc.getFileToSave();

                    ExportFile exportFile = new ExportFile();
                    exportFile.createFile(file, content);
                } catch (IOException ex) {
                    Logger.getLogger(ExportFilePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.jDialog.dispose();
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void rdCellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCellActionPerformed
        cmbSpreadsheet.setEnabled(false);
        rdWorkbook.setSelected(false);
        rdSpreadsheet.setSelected(false);
    }//GEN-LAST:event_rdCellActionPerformed

    private void txtWorkbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWorkbookActionPerformed

    }//GEN-LAST:event_txtWorkbookActionPerformed

    private void rdWorkbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdWorkbookActionPerformed
        cmbSpreadsheet.setEnabled(false);
        rdSpreadsheet.setSelected(false);
        rdCell.setSelected(false);
    }//GEN-LAST:event_rdWorkbookActionPerformed

    private void rdSpreadsheetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdSpreadsheetActionPerformed
        rdWorkbook.setSelected(false);
        rdCell.setSelected(false);
        cmbSpreadsheet.setEnabled(true);
    }//GEN-LAST:event_rdSpreadsheetActionPerformed

    private void txtCellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCellActionPerformed

    }//GEN-LAST:event_txtCellActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.jDialog.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnExport;
    private javax.swing.JComboBox cmbSpreadsheet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton rdCell;
    private javax.swing.JRadioButton rdSpreadsheet;
    private javax.swing.JRadioButton rdWorkbook;
    private javax.swing.JTextField txtCell;
    private javax.swing.JTextField txtSpreadsheet;
    private javax.swing.JTextField txtWorkbook;
    // End of variables declaration//GEN-END:variables
}
